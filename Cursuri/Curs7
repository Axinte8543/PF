Clasa de tipuri Functor

Functor este o abstracție utilă pentru lucrul cu structuri de date care conțin elemente transformabile:
-Liste ([])
-Opțiuni (Maybe)
-Rezultate cu erori (Either)
-Structuri mai complexe, cum ar fi arbori binari sau IO.

Clasa Functor generalizează conceptul de mapare a unei funcții peste elementele unei structuri, indiferent de natura structurii. 
Dacă înțelegi cum funcționează map pentru liste, îți poți extinde intuiția la alte tipuri de date folosind fmap.

Cum putem sa generalizam functia map la alte tipuri parametrizate?

class Functor f where --f constructor de tip
  fmap :: (a -> b) -> f a -> f b

--Funcția fmap ia o funcție obișnuită și o aplică fiecărui element din structura f, fără a schimba structura în sine.
instance Functor [] where
  fmap = map --fmap este pur și simplu echivalentul funcției map, care aplică o funcție fiecărui element dintr-o listă
fmap (*2) [1, 2, 3] -- [2, 4, 6]

instance Functor Maybe where
  fmap f Nothing = Nothing
  fmap f (Just x) = Just (f x)
fmap (+1) (Just 5)  -- Just 6
fmap (+1) Nothing   -- Nothing

instance Functor (Either e) where
    fmap _ (Left err) = Left err
    fmap f (Right x)  = Right (f x)
fmap (*2) (Right 10) -- Right 20
fmap (*2) (Left "Eroare") -- Left "Eroare"

> ( fmap . fmap ) ( + 1 ) [ Just 1 , Just 2 , Just 3]
[Just 2 , Just 3 , Just 4]

data Arbore a = Nil
              | Nod a (Arbore a) (Arbore a)

instance Functor Arbore where
 fmap f Nil = Nil
 fmap f (Nod x | r) = Nod (f x) (fmap f l) (fmap f r)

arboreEx :: Arbore Int
arboreEx = Nod 10 (Nod 5 Nil Nil) (Nod 15 (Nod 12 Nil Nil) Nil)

dublare :: Int -> Int
dublare x = x * 2

arboreModificat :: Arbore Int
arboreModificat = fmap dublare arboreEx

--Nod 20 (Nod 10 Nil Nil) (Nod 30 (Nod 24 Nil Nil) Nil)

fmap f ca e obtiuna prina transformarea rezultatelor produse de computatia ca folosind functia f
(si doar atat!)

data WhoCares a = ItDoesnt
                | Matter a
                | WhatThisIsCalled
                deriving (Eq, Show)

instance Functor WhoCares where
  fmap _ ItDoesnt = WhatThisIsCalled
  fmap _ WhatThisIsCalled = ItDoesnt
  fmap f (Matter a) = Matter (f a)

>fmap id ItDoesnt
WhatThisIsCalled
>id ItDoesnt
ItDoesnt


Data CountingBad a =
  Heisenberg Int a
  deriving (Eq, Show)

instance Functor CountingBad where
  fmap f ( Heisenberg n a) = Heisenberg (n+1) (f a)

>oneWhoKnocks = Heisenberg 0 "Uncle"
>f = (++" Jesse")
>g = (++" lol")
>fmap (f . g) oneWhoKnocks
Heisenberg 1 "Uncle lol Jesse"
>fmap f . fmap g $ oneWhoKnocks
Heisenberg 2 "Uncle lol Jesse"

Putem folosim fmap pentru a transforma h :: a ->b intr- functie fmap h :: m a -> m b

Cum transformam un obiect din m (b -> c) intr-o functie m b -> m c?
 ap :: m (b -> c) -> (m b -> m c), sau, ca operator
 (<*>) :: m(b -> c) -> m b -> m c


Clase de tipuri Applicative
Orice instanta a lui Applicative trebuie sa fie instanta a lui Functor

class Functor m where
fmap :: ( a −> b ) −> m a −> m b
class Functor m => Applicative m where
pure :: a −> m a --Împachetează o valoare într-un context.
( <*> ) :: m ( a −> b ) −> m a −> m b --Aplica o funcție împachetată într-un context (f (a -> b)) asupra unei valori împachetate într-un context (f a).

Instante- Maybe

Pentru tipul Maybe, instanța Applicative arată așa:
instance Applicative Maybe where
  pure = Just --pure creează un Just dintr-o valoare simplă.
  Nothing <*> _ = Nothing --(<*>) aplică o funcție aflată în contextul Just (Just f) unei valori în context (mx).
  Just f <*> x = fmap f x
> pure "Hey" :: Maybe String
Just "Hey"
> (++) <$> (Just "Hey ") <*> (Just "You!")
Just "Hey You!"


-- Adună două numere, ambele în contextul Maybe
add :: Int -> Int -> Int
add x y = x + y

example :: Maybe Int
example = pure add <*> Just 3 <*> Just 5 --pure add creează un Just add, adică Just (\x y -> x + y)
--(<*>) Just (\x y -> x + y) (Just 3) aplică funcția asupra lui 3 și întoarce Just (\y -> 3 + y).
--(<*>) Just (\y -> 3 + y) (Just 5) aplică funcția asupra lui 5 și întoarce Just 8


Instanta Either
Instance Applicative (Either a) where
  pure = Right
  Left e <*> _ = Left e
  Right f <*> x = fmap f x

>pure "Hey" :: Either a String
Right "Hey"
> (++) <$> (Right "Hey ") <*> (Right "You!")
Right "Hey You!"

add :: Int -> Int -> Int
add x y = x + y

example1 :: Either String Int
example1 = pure add <*> Right 3 <*> Right 5
-- Rezultat: Right 8

example2 :: Either String Int
example2 = pure add <*> Left "Eroare: prima valoare e invalidă" <*> Right 5
-- Rezultat: Left "Eroare: prima valoare e invalidă"

example3 :: Either String Int
example3 = pure add <*> Right 3 <*> Left "Eroare: a doua valoare e invalidă"
-- Rezultat: Left "Eroare: a doua valoare e invalidă"

Instanta Lista
instance Applicative [] where
  pure x = [x --Creează o listă care conține un singur element.
  fs <*> xs = [f x | f<-fs, x<-xs] --Combina toate funcțiile din lista fs cu toate valorile din lista xs.

>pure "Hey" :: [String]
["Hey"]
> (++) <$> ["Hello ", "Goodbye "] <*> ["world", "happiness"]
["Hello world","Hello happiness","Goodbye world","Goodbye happiness"]
>(+) <$> [1.2] <*> [3,4]
[4,5,5,6]
>[(+), (*)] <$> [1.2] <*> [3,4]
[4,5,5,6,3,4,6,8]
>filter (>50) $ (*) <$> [2,5,10] <*> [8,10,11]
[55,80,100,110]

example3 :: [(Int, Int)]
example3 = pure (,) <*> [1, 2] <*> [3, 4] -- Rezultat: [(1,3), (1,4), (2,3), (2,4)]

Instanța Applicative pentru liste este utilă în generarea tuturor combinațiilor posibile de valori.
