Clasa de tipuri Functor

Cum putem sa generalizam functia map la alte tipuri parametrizate?

class Functor f where
  fmap :: (a -> b) -> f a -> f b

instance Functor [] where
  fmap = map

instance Functor Maybe where
  fmap f Nothing = Nothing
  fmap f (Just x) = Just (f x)

instance Functor (Either e) where
    fmap _ (Left x) = Left x
    fmap f (Right y) = Right (f y)

data Arbore a = Nil
              | Nod a (Arbore a) (Arbore a)

instance Functor Arbore where
 fmap f Nil = Nil
 fmap f (Nod x | r) = Nod (f x) (fmap f l) (fmap f r)

>fmap (*2) [1..3]
[2,4,6]
>fmap (*2) (Just 200)
Just 400
>fmap (*2) Nothing
Nothing
> fmap (*2) (+100) 4
208
> fmap (*2) (Right 6)
Right 12
> fmap (*2) (Left 135)
Left 135
> ( fmap . fmap ) ( + 1 ) [ Just 1 , Just 2 , Just 3]
[Just 2 , Just 3 , Just 4]


fmap f ca e obtiuna prina transformarea rezultatelor produse de computatia ca folosind functia f
(si doar atat!)

data WhoCares a = ItDoesnt
                | Matter a
                | WhatThisIsCalled
                deriving (Eq, Show)

instance Functor WhoCares where
  fmap _ ItDoesnt = WhatThisIsCalled
  fmap _ WhatThisIsCalled = ItDoesnt
  fmap f (Matter a) = Matter (f a)

>fmap id ItDoesnt
WhatThisIsCalled
>id ItDoesnt
ItDoesnt


Data CountingBad a =
  Heisenberg Int a
  deriving (Eq, Show)

instance Functor CountingBad where
  fmap f ( Heisenberg n a) = Heisenberg (n+1) (f a)

>oneWhoKnocks = Heisenberg 0 "Uncle"
>f = (++" Jesse")
>g = (++" lol")
>fmap (f . g) oneWhoKnocks
Heisenberg 1 "Uncle lol Jesse"
>fmap f . fmap g $ oneWhoKnocks
Heisenberg 2 "Uncle lol Jesse"

Putem folosim fmap pentru a transforma h :: a ->b intr- functie fmap h :: m a -> m b

Cum transformam un obiect din m (b -> c) intr-o functie m b -> m c?
 ap :: m (b -> c) -> (m b -> m c), sau, ca operator
 (<*>) :: m(b -> c) -> m b -> m c


Clase de tipuri Applicative

class Functor m => Applicative m where
pure :: a −> m a
( <*> ) :: m ( a −> b ) −> m a −> m b

Orice instanta a lui Applicative trebuie sa fie instanta a lui Functor
• pure transforma o valoare într-o computatie minimala care are acea valoare ca rezultat si nimic mai mult!

class Functor m where
fmap :: ( a −> b ) −> m a −> m b
class Functor m => Applicative m where
pure :: a −> m a
( <*> ) :: m ( a −> b ) −> m a −> m b

Instante- Maybe

instance Applicative Maybe where
  pure = Just
  Nothing <*> _ = Nothing
  Just f <*> x = fmap f x
> pure "Hey" :: Maybe String
Just "Hey"
> (++) <$> (Just "Hey ") <*> (Just "You!")
Just "Hey You!"


mDiv x y = if y == 0 then Nothing
           else Just (x `div` y)

mF x = (+) <$> pure 4 <*> mDiv 10 x
>mF 2
Just 9

Instanta Either
Instance Applicative (Either a) where
  pure = Right
  Left e <*> _ = Left e
  Right f <*> x = fmap f x

>pure "Hey" :: Either a String
Right "Hey"
> (++) <$> (Right "Hey ") <*> (Right "You!")
Right "Hey You!"

eDiv x y = if y == 0 then Left "Division by 0!"
           else Right (x `div` y)

eF x = (+) <$> pure 4 <*> eDiv 10 x
>eF 2
Right 9


Instanta Lista
instance Applicative [] where
  pure x = [x]
  fs <*> xs = [f x | f<-fs, x<-xs]

>pure "Hey" :: [String]
["Hey"]
> (++) <$> ["Hello ", "Goodbye "] <*> ["world", "happiness"]
["Hello world","Hello happiness","Goodbye world","Goodbye happiness"]
>(+) <$> [1.2] <*> [3,4]
[4,5,5,6]
>[(+), (*)] <$> [1.2] <*> [3,4]
[4,5,5,6,3,4,6,8]
>filter (>50) $ (*) <$> [2,5,10] <*> [8,10,11]
[55,80,100,110]
