Monade

putChar :: Char -> IO ()
putChar '!' --va fi afisat semnul exclamarii

O monada este o clasa de tipuri in Haskell

Functie simpla:
x -> y --stiind x, obtinem direct y
Functie imbogatita
x -> y *** --stiind x, putem sa extragem y si sa producem un efect

Folosind tipul Maybe a
data Maybe a = Nothing | Just a

f :: Int -> Maybe Int
f x = if x < 0 then Nothing else Just (x + 1)
f(-5) --Nothing
f(1) -- Just 2


Cum putem calcula f.f

newtype Writer log a = Writer {runWriter :: (a,log)} 
--Writer este un tip definit cu newtype care păstrează:(O valoare principală de tip a si un log suplimentar (o informație atașată) de tip log.)
Tipul Writer este o monada in Haskell

f :: Int −> Writer String Int --intoarce o valoare intreaga, impreuna cu un mesaj de tip string
f x = if x < 0 then (Writer (−x,"negativ"))
       else (Writer(x,"pozitiv"))

f(-5) -- Writer (5,"negativ")
f(10) -- Writer (10,"pozitiv")


Clasa de tipuri Monad

class Applicative m => Monad m where
(>>=) :: m a −> (a −> m b) −> m b
(>>) :: m a −> m b −> m b
return :: a −> m a

O monadă este o extensie a clasei Applicative.Aceasta indică faptul că orice instanță a clasei Monad trebuie mai întâi să fie o instanță a clasei Applicative

(>>=) --operația principală a monadelor numita bind, un efect monadic de tip m a, o functie care transforma o valoare de tip a intr-un nou efect monadic m b
si returneaza un efect monadic m b

(>>) -- o versiune simplificata a lui (>>=) care ignora rezultatul primei actiuni monadice, efectueaza x, apoi efectueaza y, dar ignora rezultatul lui x

Funcția return introduce o valoare de tip a într-un context monadic de tip m a

Monadele -Gestioneaza efectele laterale(oferă o modalitate de a încorpora efecte (precum IO, erori, stări) într-un mod pur, păstrând funcțiile pure.)
         -Fac posibilă compunerea calculelor(Ele oferă operatorii (>>=) și return, care permit secvențierea calculelor în lanțuri logice)
         -Abstractizează tipurile complexe(ascund detalii legate de manipularea unui context suplimentar 
                                          (cum ar fi gestionarea erorilor în Maybe sau manipularea stării într-o monadă State))

Mondaele sunt utile deoarece codul care implementează calculele principale poate fi separat de cel care gestionează efectele sau contextul.
Ele oferă un cadru pentru a controla:
                                     -Erorile (ex. Maybe, Either).
                                     -Starea (ex. State).
                                     -Fluxurile asincrone (ex. IO, Async).
                                     -Liste sau calcule non-deterministe (ex. []).
Monadele oferă o interfață comună pentru contexte diverse, făcând codul mai ușor de generalizat


Ex:

main :: IO ()
main = do
  let action = join $ putStrLn <$> getLine
  -- Executăm acțiunea
  action

--In terminal scriem main, programul așteaptă ca utilizatorul să introducă o linie de text.
--după ce utilizatorul introduce o linie de text și apasă Enter, linia respectivă este afișată pe ecran.
-- putStrLn <$> getLine creează o acțiune IO (IO ()) care, atunci când este executată, va returna o altă acțiune IO () care afișează linia citită.


twoBinds' :: IO ()
twoBinds' = do
  putStrLn "Nume: " --p
  name <- getLine
  putStrLn "Varsta: "
  age <- getLine
  putStrLn ("Numele meu este " ++ name ++ " si am " ++ age ++ " de ani.")

main :: IO () --folosim monada IO
main = twoBinds'

putStrLn ia un String ca argument și returnează o acțiune IO () care, atunci când este executată, afișează șirul de caractere pe ecran, 
urmat de un caracter de sfârșit de linie (newline).
getLine este o acțiune IO care, atunci când este executată, citește o linie de text de la intrarea standard (de obicei tastatura) 
și returnează șirul de caractere citit, ambalat într-o acțiune IO

main :: IO ()
main = do
  let ma = Just 3 --ma este o valoare de tip Maybe Int
  let mf = Just (*2) --mf este o valoare de tip Maybe (Int -> Int)
  print $ ma >>= (\x -> Just (x + 1))  -- Just 4 >>= utliziat pentru a extrage valoarea din Just
  print $ pure 3 :: Maybe Int          -- Just 3 pure ambaleaza o valoare intr-un context
  print $ mf <*> ma                    -- Just 6 utilizat pentru a aplica o functie dintr-un context pe o valoare dintr-un alt context
  print $ fmap (+1) ma                 -- Just 4 fmap functie din clasa Functor care aplica o functie pe o valoare dintr-un context
Monada utilizate este Maybe

1. Monada IO
Descriere: Gestionează operațiile de intrare/ieșire (I/O).
main :: IO ()
main = do
  putStrLn "Nume: "
  name <- getLine
  putStrLn ("Salut, " ++ name ++ "!")

2. Monada Maybe
Descriere: Gestionează valori care pot fi absente (parțialitate).
safeDiv :: Int -> Int -> Maybe Int
safeDiv _ 0 = Nothing
safeDiv x y = Just (x `div` y)

3. Monada Either
Descriere: Gestionează valori care pot reprezenta fie un rezultat de succes, fie o eroare (excepții).
safeDiv :: Int -> Int -> Either String Int
safeDiv _ 0 = Left "Division by zero"
safeDiv x y = Right (x `div` y)

4.Monada [] (lista)
Gestionează nedeterminismul (calcul cu multiple rezultate).
pairs :: [a] -> [b] -> [(a, b)]
pairs xs ys = do
  x <- xs
  y <- ys
  return (x, y)

5. Monada Writer
Gestionează logging-ul (păstrarea unui jurnal de mesaje).
import Control.Monad.Writer

logNumber :: Int -> Writer [String] Int
logNumber x = do
  tell ["Got number: " ++ show x]
  return x

example :: Writer [String] Int
example = do
  a <- logNumber 3
  b <- logNumber 5
  return (a + b)

6. Monada State
Descriere: Gestionează starea (modificarea și accesarea stării).
import Control.Monad.State

increment :: State Int Int
increment = do
  n <- get
  put (n + 1)
  return n

example :: State Int Int
example = do
  a <- increment
  b <- increment
  return (a + b)

7. Monada Reader
Descriere: Gestionează memoria read-only (accesarea unui context imutabil).
import Control.Monad.Reader

askName :: Reader String String
askName = do
  name <- ask
  return ("Hello, " ++ name ++ "!")

example :: Reader String String
example = askName
