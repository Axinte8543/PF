Expresii si arbori:
import Data.List

data Expr = Const Int
          | Expr :+: Expr
          | Expr :*: Expr
           deriving Eq

data Operation = Add | Mult deriving (Eq, Show)

data Tree = Lf Int
          | Node Operation Tree Tree
           deriving (Eq,Show)

instance Show Expr where
  show (Const x) = show x
  show (e1 :+: e2) = "(" ++ show e1 ++ " + "++ show e2 ++ ")"
  show (e1 :*: e2) = "(" ++ show e1 ++ " * "++ show e2 ++ ")"

1.

evalExp :: Expr -> Int
evalExp (Const x) = x
evalExp (e1 :+: e2) = evalExp e1 + evalExp e2
evalExp (e1 :*: e2) = evalExp e1 * evalExp e2

2.
evalArb :: Tree -> Int
evalArb (Lf x) = x
evalArb (Node Add e1 e2) = evalArb e1 + evalArb e2
evalArb (Node Mult e1 e2) = evalArb e1 * evalArb e2

3.
expToArb :: Expr -> Tree
expToArb (Const x) = Lf x
expToArb (e1 :+: e2) = Node Add (expToArb e1) (expToArb e2)
expToArb (e1 :*: e2) = Node Mult (expToArb e1) (expToArb e2)

4.
data IntSearchTree value
    = Empty
    | Bnode
        (IntSearchTree value) -- Subarbore
        Int                   -- Cheia
        (Maybe value)         -- Valoarea asociată cheii
        (IntSearchTree value) -- Subaroberele drept
      deriving (Eq, Show)
--exemplu de arbore:(Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty))

lookup' :: Int -> IntSearchTree value -> Maybe value
lookup' _ Empty = Nothing
lookup' key (Bnode left k v right) =
    if key == k
    then v
    else if key < k
         then lookup' key left
         else lookup' key right
--lookup' 3 (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => Just 4

5.

keys :: IntSearchTree value -> [Int]
keys Empty = []
keys (Bnode left k _ right) = keys left ++ [k] ++ keys right
--keys (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => [1,3,5]

6.
values :: IntSearchTree value -> [value]
values Empty = []
values (BNode left key Nothing right) = values left ++ values right
values (BNode left key value right) = values left ++ [val] ++ values right
    where Just val = value
--values (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => [2,4,6]

7.
insert :: Int -> value -> IntSearchTree value -> IntSearchTree value
insert key val Empty = Bnode Empty key (Just val) Empty
insert key val (Bnode left k v right) =
    if key == k
    then Bnode left k (Just val) right
    else if key < k
         then Bnode (insert key val left) k v right
         else Bnode left k v (insert key val right)
--insert 3 4 (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)

8.
-- Funcția delete care marchează ca șters un element dintr-un arbore de căutare
delete :: Int -> IntSearchTree value -> IntSearchTree value
delete key Empty = Empty
delete key (Bnode left k v right) =
    if key == k
    then Bnode left k Nothing right
    else if key < k
         then Bnode (delete key left) k v right
         else Bnode left k v (delete key right)         
--delete 3 (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => Bnode (Bnode Empty 1 (Just 2) Empty) 3 Nothing (Bnode Empty 5 (Just 6) Empty)

9.
toList :: IntSearchTree value -> [(Int, value)]
toList Empty = []
toList (Bnode left key Nothing right) = toList left ++ toList right
toList (Bnode left key value right) = toList left ++ [(key, val)] ++ toList right
    where Just val = value
--toList (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => [(1,2),(3,4),(5,6)]

10.
-- Funcția fromList care construiește un arbore de căutare dintr-o listă de perechi (cheie, valoare)
fromList :: [(Int, value)] -> IntSearchTree value
fromList [] = Empty
fromList ((key, val):xs) = insert key val (fromList xs)
--fromList [(1,2),(3,4),(5,6)] => BNode (BNode Empty 1 (Just 2) Empty) 3 (Just 4) (BNode Empty 5 (Just 6) Empty)

11.
printTree :: IntSearchTree value -> String
printTree Empty = ""
printTree (Bnode left key Nothing right) = printTree left ++ printTree right
printTree (Bnode left key (Just val) right) = "(" ++ printTree left ++ show key ++ printTree right ++ ")"
--printTree (Bnode (Bnode Empty 1 (Just 2) Empty) 3 (Just 4) (Bnode Empty 5 (Just 6) Empty)) => "((1)2(3)4(5)6)"
