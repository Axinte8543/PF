Se da urmatorul tip de date reprezentând arbori ternari cu informatia de tip întreg în radacina.
data Tree = Empty -- arbore vid
  | Node Int Tree Tree Tree -- arbore cu valoare de tip Int in radacina si 3 fii

-- extree :: Tree
-- extree = Node 4 (Node 5 Empty Empty Empty)
-- (Node 3 Empty Empty (Node 1 Empty Empty Empty)) Empty

1. Instantiati clasa urmatoare pentru tipul Tree.
class ArbInfo t where
  level :: t -> Int -- intoarce inaltimea arborelui;
                    -- consideram ca un arbore vid are inaltimea 0
  sumval :: t -> Int -- intoarce suma valorilor din arbore
  nrFrunze :: t -> Int -- intoarce nr de frunze al arborelui

Rezolvare:

data Tree = Empty
          | Node Int Tree Tree Tree
          deriving (Show, Eq)

class ArbInfo t where
  level :: t -> Int
  sumval :: t -> Int
  nrFrunze :: t -> Int

instance ArbInfo Tree where
  level Empty = 0
  level (Node _ left middle right) = 1 + maximum [level left, level middle, level right]

  sumval Empty = 0
  sumval (Node val left middle right) = val + sumval left + sumval middle + sumval right

  nrFrunze Empty = 0
  nrFrunze (Node _ Empty Empty Empty) = 1
  nrFrunze (Node _ left middle right) = nrFrunze left + nrFrunze middle + nrFrunze right

-- Exemplu de arbore ternar
extree :: Tree
extree = Node 4 (Node 5 Empty Empty Empty)
                (Node 3 Empty Empty (Node 1 Empty Empty Empty))
                Empty

main :: IO ()
main = do
  print $ level extree    -- 3
  print $ sumval extree   -- 13
  print $ nrFrunze extree -- 2


Vectori
În continuare, vom implementa spatii vectoriale. Se da urmatoarea clasa a scalarilor. 
class Scalar a where
  zero :: a
  one :: a
  adds :: a -> a -> a
  mult :: a -> a -> a
  negates :: a -> a
  recips :: a -> a
2. Instantiati clasa Scalar folosindu-va de tipuri primitive (hint: nu uitati, trebuie sa fie corpuri comutative). Apoi, considerati clasa de mai jos a vectorilor.
class (Scalar a) => Vector v a where
  zerov :: v a
  onev :: v a
  addv :: v a -> v a -> v a -- adunare vector
  smult :: a -> v a -> v a -- inmultire cu scalare
  negatev :: v a -> v a -- negare vector


Rezolvare:
class Scalar a where
  zero :: a
  one :: a
  adds :: a -> a -> a
  mult :: a -> a -> a
  negates :: a -> a
  recips :: a -> a

instance Scalar Double where
  zero = 0
  one = 1
  adds = (+)
  mult = (*)
  negates = negate
  recips = recip

class (Scalar a) => Vector v a where
  zerov :: v a
  onev :: v a
  addv :: v a -> v a -> v a
  smult :: a -> v a -> v a
  negatev :: v a -> v a

instance Scalar a => Vector [] a where
  zerov = []
  onev = [one]
  addv = zipWith adds
  smult s = map (mult s)
  negatev = map negates

main :: IO ()
main = do
  let v1 = [1.0, 2.0, 3.0] :: [Double]
  let v2 = [4.0, 5.0, 6.0] :: [Double]
  print $ addv v1 v2       -- [5.0, 7.0, 9.0]
  print $ smult 2 v1       -- [2.0, 4.0, 6.0]
  print $ negatev v1       -- [-1.0, -2.0, -3.0]
  print $ zerov :: [Double] -- []
  print $ onev :: [Double]  -- [1.0]


3.Scrieti doua instante ale clasei Vector pentru a reprezenta vectori bidimensionali si tridimensionali.
data Vec2D a = Vec2D a a deriving (Show, Eq)
data Vec3D a = Vec3D a a a deriving (Show, Eq)

In loc de ce e dupa instance Scalar a => Vector [] a where adaugam:

instance Scalar a => Vector Vec2D a where
  zerov = Vec2D zero zero
  onev = Vec2D one one
  addv (Vec2D x1 y1) (Vec2D x2 y2) = Vec2D (adds x1 x2) (adds y1 y2)
  smult s (Vec2D x y) = Vec2D (mult s x) (mult s y)
  negatev (Vec2D x y) = Vec2D (negates x) (negates y)

instance Scalar a => Vector Vec3D a where
  zerov = Vec3D zero zero zero
  onev = Vec3D one one one
  addv (Vec3D x1 y1 z1) (Vec3D x2 y2 z2) = Vec3D (adds x1 x2) (adds y1 y2) (adds z1 z2)
  smult s (Vec3D x y z) = Vec3D (mult s x) (mult s y) (mult s z)
  negatev (Vec3D x y z) = Vec3D (negates x) (negates y) (negates z)

main :: IO ()
main = do
  let v2d1 = Vec2D 1.0 2.0
  let v2d2 = Vec2D 3.0 4.0
  print $ addv v2d1 v2d2       -- Vec2D 4.0 6.0
  print $ smult 2 v2d1         -- Vec2D 2.0 4.0
  print $ negatev v2d1         -- Vec2D (-1.0) (-2.0)
  print $ zerov :: Vec2D Double -- Vec2D 0.0 0.0
  print $ onev :: Vec2D Double  -- Vec2D 1.0 1.0


